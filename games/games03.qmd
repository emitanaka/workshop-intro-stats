---
title: "Significance testing"
format: 
  live-dashboard:
    scrolling: true
---


## Row {height=50% .flow}

::: {.card  title="One-sided Binomial test"}

```{css}
.btn.btn-quarto {
  border-color: grey;
  color: white;
  background-color: grey;
}
```


$H_0$: p = ${p1} vs. $H_1$: p $<$ ${p1}


```{r}
#| include: false
source("setup.R")
```


```{ojs}
viewof n1 = Inputs.number([1, Infinity], {step: 1, label: "Number of trials", value: 200})
viewof p1 = Inputs.range([0, 1], {step: 0.01, label: "The expected probability of success", value: 0.5})
viewof draw1 = Inputs.button("Run experiment")
```


You are going to run ${n1} independent trials and record the number of successes out of those ${n1} trials.

```{webr}
#| include: false
library(tidyverse)
```


```{webr}
#| autorun: true
#| echo: false
#| input:
#|  - n1
#|  - draw1
#| define:
#|  - x1
#|  - p10
p10 <- round(runif(1), 2)
x1 <-  rbinom(1, n1, p10)
```


```{webr}
#| autorun: true
#| echo: false
#| input:
#|  - n1
#|  - x1
#|  - p1
#| define:
#|  - pval1
out <- binom.test(x1, n1, p = p1)$p.value
pval1 <- ifelse(out >= 0.0001, 
               scales::comma(out, 0.0001),
               "<0.0001")
```


<details><summary>Reveal experimental result</summary>

There are ${x1} successes in ${n1} trials. Therefore the observed percentage of success is ${100 * x1/n1}%.

</details>

<details><summary>Reveal p-value based on Binomial test</summary>

The p-value is ${pval1}.

</details>

<details><summary>Reveal true p</summary>

The true p is ${p10}.

</details>



:::


::: {.card  title="Two-sided Binomial test"}

$H_0$: p = ${p2} vs. $H_1$: p $\neq$ ${p2}


```{ojs}
viewof n2 = Inputs.number([1, Infinity], {step: 1, label: "Number of trials", value: 50})
viewof p2 = Inputs.range([0, 1], {step: 0.01, label: "The expected probability of success", value: 0.5})
viewof draw2 = Inputs.button("Run experiment")
```


You are going to run ${n2} independent trials and record the number of successes out of those ${n2} trials.

```{webr}
#| include: false
library(tidyverse)
```


```{webr}
#| autorun: true
#| echo: false
#| input:
#|  - n2
#|  - draw2
#| define:
#|  - x2
#|  - p20
p20 <- round(runif(1), 2)
x2 <-  rbinom(1, n2, p20)
```


```{webr}
#| autorun: true
#| echo: false
#| input:
#|  - n2
#|  - x2
#|  - p2
#| define:
#|  - pval2
out <- binom.test(x2, n2, p = p2)$p.value
pval2 <- ifelse(out >= 0.0001, 
               scales::comma(out, 0.0001),
               "<0.0001")
```


<details><summary>Reveal experimental result</summary>

There are ${x2} successes in ${n2} trials. Therefore the observed percentage of success is ${(100 * x2/n2).toFixed(1)}%.

</details>

<details><summary>Reveal p-value based on Binomial test</summary>

The p-value is ${pval2}.

</details>

<details><summary>Reveal true p</summary>

The true p is ${p20}.

</details>



:::


::: {.card  title="One-sample, one-sided t test"}

$H_0$: $\mu$ = ${mu11} vs. $H_1$: $\mu$ > ${mu11}

```{ojs}
viewof n11 = Inputs.number([1, Infinity], {step: 1, label: "Number of samples", value: 50})
viewof mu11 = Inputs.number({step: 0.1, label: "The expected population mean", value: 0})
viewof draw11 = Inputs.button("Run experiment")
```

You sample ${n11} observations from a population.

```{webr}
#| fig-width: 5
#| fig-height: 2
#| autorun: true
#| echo: false
#| input:
#|  - n11
#|  - draw11
#|  - mu11
#| define:
#|  - xbar11
#|  - sd11
#|  - dgp11
#|  - pval11
generate <- function(n, mu) {
  if(runif(1) < 0.4) {
    sd <- round(runif(1, 0.5, 10), 1)
    list(data = rnorm(n, mu, sd), dgp = paste0("N(", mu,", ", sd, ")"))
  } else if(runif(1) < 0.4) {
    sd <- round(runif(1, 0.5, 5), 1)
    mu <- mu + sample(-5:5, 1)
    list(data = rnorm(n, mu, sd), dgp = paste0("N(", mu,", ", sd, ")"))
  } else {
    shape <- ifelse(mu <= 1, sample(1:5, 1), mu)
    list(data = rgamma(n, shape, 1), dgp = paste0("Gamma(", shape,", 1)"))
  }
}
out <- generate(n11, mu11)
dgp11 <- out$dgp
xbar11 <- mean(out$data)
sd11 <- sd(out$data)

ggplot(data.frame(x = out$data), aes(x)) +
  geom_histogram(bins = 30, color = "white") +
  geom_vline(xintercept = mu11, linetype = "dashed", color = "red") +
  labs(title = "Sample distribution", x = "x", y = "Count") +
  theme_minimal()

out <- 1 - pt((xbar11 - mu11) / (sd11 / sqrt(n11)), df = n11 - 1)
pval11 <- ifelse(out >= 0.0001, 
               scales::comma(out, 0.0001),
               "<0.0001")
xbar11 <- round(xbar11, 1)
sd11 <- round(sd11, 2)
```



<details><summary>Reveal experimental result</summary>

The sample mean is ${xbar11} and the sample standard deviation is ${sd11}.


</details>

<details><summary>Reveal p-value based on one-sample, one-sided t-test</summary>

The p-value is ${pval11}.

</details>

<details><summary>Reveal true data generating process</summary>

The true population distribution is ${dgp11}.

</details>



:::



## Row


::: {.card  title="One-sample, two-sided t test"}

$H_0$: $\mu$ = ${mu12} vs. $H_1$: $\mu$ $\neq$ ${mu12}

```{ojs}
viewof n12 = Inputs.number([1, Infinity], {step: 1, label: "Number of samples", value: 50})
viewof mu12 = Inputs.number({step: 0.1, label: "The expected population mean", value: 0})
viewof draw12 = Inputs.button("Run experiment")
```

You sample ${n12} observations from a population.

```{webr}
#| fig-width: 5
#| fig-height: 3
#| autorun: true
#| echo: false
#| input:
#|  - n12
#|  - draw12
#|  - mu12
#| define:
#|  - xbar12
#|  - sd12
#|  - dgp12
#|  - pval12
generate <- function(n, mu) {
  if(runif(1) < 0.4) {
    sd <- round(runif(1, 0.5, 10), 1)
    list(data = rnorm(n, mu, sd), dgp = paste0("N(", mu,", ", sd, ")"))
  } else if(runif(1) < 0.4) {
    sd <- round(runif(1, 0.5, 5), 1)
    mu <- mu + sample(-5:5, 1)
    list(data = rnorm(n, mu, sd), dgp = paste0("N(", mu,", ", sd, ")"))
  } else {
    shape <- ifelse(mu <= 1, sample(1:5, 1), mu)
    list(data = rgamma(n, shape, 1), dgp = paste0("Gamma(", shape,", 1)"))
  }
}
out <- generate(n12, mu12)
dgp12 <- out$dgp
xbar12 <- mean(out$data)
sd12 <- sd(out$data)

ggplot(data.frame(x = out$data), aes(x)) +
  geom_histogram(bins = 30, color = "white") +
  geom_vline(xintercept = mu12, linetype = "dashed", color = "red") +
  labs(title = "Sample distribution", x = "x", y = "Count") +
  theme_minimal()

out <- t.test(out$data, mu = mu12)$p.value
pval12 <- ifelse(out >= 0.0001, 
               scales::comma(out, 0.0001),
               "<0.0001")
xbar12 <- round(xbar12, 1)
sd12 <- round(sd12, 2)
```



<details><summary>Reveal experimental result</summary>

The sample mean is ${xbar12} and the sample standard deviation is ${sd12}.


</details>

<details><summary>Reveal p-value based on one-sample, one-sided t-test</summary>

The p-value is ${pval12}.

</details>

<details><summary>Reveal true data generating process</summary>

The true population distribution is ${dgp12}.

</details>



:::


::: {.card  title="Two-sample, two-sided t test"}

$H_0$: $\mu_1 = \mu_2$ vs. $H_1$: $\mu_1 \neq \mu_2$



```{ojs}
viewof n221 = Inputs.number([1, Infinity], {step: 1, label: "Number of samples", value: 50})
viewof n222 = Inputs.number([1, Infinity], {step: 1, label: "Number of samples", value: 50})
viewof draw22 = Inputs.button("Run experiment")
```

You sample ${n221} observations from one population and ${n222} observations from another population.

```{webr}
#| fig-width: 5
#| fig-height: 3
#| autorun: true
#| echo: false
#| input:
#|  - n221
#|  - n222
#|  - draw22
#| define:
#|  - xbar221
#|  - sd221
#|  - xbar222
#|  - sd222
#|  - dgp221
#|  - dgp222
#|  - pval22p
#|  - pval22n
generate <- function(n, mu) {
  if(runif(1) < 0.4) {
    sd <- round(runif(1, 0.5, 10), 1)
    list(data = rnorm(n, mu, sd), dgp = paste0("N(", mu,", ", sd, ")"))
  } else if(runif(1) < 0.4) {
    sd <- round(runif(1, 0.5, 5), 1)
    mu <- mu + sample(-5:5, 1)
    list(data = rnorm(n, mu, sd), dgp = paste0("N(", mu,", ", sd, ")"))
  } else {
    shape <- ifelse(mu <= 1, sample(1:5, 1), mu)
    list(data = rgamma(n, shape, 1), dgp = paste0("Gamma(", shape,", 1)"))
  }
}
out1 <- generate(n221, 10)
out2 <- generate(n222, 10)
dgp221 <- out1$dgp
dgp222 <- out2$dgp
xbar221 <- round(mean(out1$data), 2)
xbar222 <- round(mean(out2$data), 2)
sd221 <- round(sd(out1$data), 2)
sd222 <- round(sd(out2$data), 2)

ggplot(data.frame(x = c(out1$data, out2$data), 
                  g = rep(c("Group 1", "Group 2"), times = c(n221, n222))), 
       aes(g, x)) +
  geom_violin() + 
  geom_boxplot(width = 0.1) +
  labs(title = "Sample distribution", x = "", y = "Observation") +
  theme_minimal()

out <- t.test(out1$data, out2$data)$p.value
pval22p <- ifelse(out >= 0.0001, 
                scales::comma(out, 0.0001),
                 "<0.0001")
out <- t.test(out1$data, out2$data, var.equal = TRUE)$p.value
pval22n <- ifelse(out >= 0.0001, 
                scales::comma(out, 0.0001),
                 "<0.0001")

```



<details><summary>Reveal experimental result</summary>


| Group | Sample mean | Sample standard deviation |
|-------|-------------|---------------------------|
| 1     | ${xbar221}  | ${sd221}                  |
| 2     | ${xbar222}  | ${sd222}                  |


</details>

<details><summary>Reveal p-value based on one-sample, one-sided t-test</summary>

The p-value is ${pval22p} if assuming variances of the group is assumed to be different.

The p-value is ${pval22n} if assuming variances are equal.


</details>

<details><summary>Reveal true data generating process</summary>

The true population distribution for:

- group 1 is ${dgp221}, and
- group 2 is ${dgp222}.


</details>




:::


::: {.card  title="Paired two-sided t test"}

$H_0$: $\mu_1 = \mu_2$ vs. $H_1$: $\mu_1 \neq \mu_2$


or alternatively, $H_0$: $\mu_d = 0$ vs. $H_1$: $\mu_d \neq 0$

```{ojs}
viewof n22p = Inputs.number([1, Infinity], {step: 1, label: "Number of samples", value: 50})
viewof draw22p = Inputs.button("Run experiment")
```

You sample ${n22p} before and after observations from a population.

```{webr}
#| fig-width: 5
#| fig-height: 3
#| autorun: true
#| echo: false
#| input:
#|  - n22p
#|  - draw22p
#| define:
#|  - dbar22p
#|  - sd22p
#|  - dgp22p
#|  - pval22pair
generate <- function(n, mu) {
  if(runif(1) < 0.4) {
    sd <- round(runif(1, 0.5, 10), 1)
    list(data = rnorm(n, mu, sd), dgp = paste0("N(", mu,", ", sd, ")"))
  } else if(runif(1) < 0.4) {
    sd <- round(runif(1, 0.5, 5), 1)
    mu <- mu + sample(-5:5, 1)
    list(data = rnorm(n, mu, sd), dgp = paste0("N(", mu,", ", sd, ")"))
  } else {
    shape <- ifelse(mu <= 1, sample(1:5, 1), mu)
    list(data = rgamma(n, shape, 1), dgp = paste0("Gamma(", shape,", 1)"))
  }
}
out1 <- generate(n22p, 5)
out2 <- generate(n22p, 0)
out2 <- list(data = out1$data + out2$data, 
             dgp_diff = out2$dgp)
dgp22p <- out2$dgp_diff
dbar22p <- round(mean(out1$data - out2$data), 2)
sd22p <- round(sd(out1$data - out2$data), 2)

ggplot(data.frame(x = out1$data - out2$data), aes(x))  +
  geom_histogram(bins = 30, color = "white") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
  labs(title = "Sample distribution", x = "Paired difference", y = "Count") +
  theme_minimal()

out <- t.test(out1$data - out2$data)$p.value
pval22pair <- ifelse(out >= 0.0001, 
                scales::comma(out, 0.0001),
                 "<0.0001")
```



<details><summary>Reveal experimental result</summary>

The sample mean of the difference between paired observation is ${dbar22p} and its sample standard deviation is ${sd22p}.

</details>

<details><summary>Reveal p-value based on one-sample, one-sided t-test</summary>

The p-value is ${pval22pair}.


</details>

<details><summary>Reveal true data generating process</summary>

The true population distribution for the difference is ${dgp22p}.


</details>





:::

## Row