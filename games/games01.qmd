---
title: Playing with parametric distributions
format:
  live-dashboard:
    scrolling: true
    css:
      - games.css
knitr: true
---




## Row {height=50% .flow}



::: {.card  title="Binomial distribution"}

```{r}
#| include: false
source("setup.R")
```


```{webr}
#| include: false
library(tidyverse)
theme_set(theme_minimal() + 
            theme(plot.background = element_rect(fill = "transparent", color = NA),
                  panel.background = element_rect(fill = "transparent", color = NA)))
knitr::opts_chunk$set(dev.args = list(bg = "transparent"), fig.align = "center")
```

```{ojs}
//| echo: false
viewof n = Inputs.number([1, Infinity], {step: 1, label: "n", value: 10})
viewof p = Inputs.range([0, 1], {step: 0.01, label: "p", value: 0.5})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2
#| input:
#|  - n
#|  - p
data.frame(x = 0:n, p = dbinom(0:n, n, p)) |> 
  ggplot(aes(x, p)) +
  geom_col() +
  labs(x = "x", y = "P(X = x)") +
  scale_x_continuous(breaks = 0:n)
```


:::


::: {.card  title="Normal distribution -- grey N(0,1)"}

```{ojs}
//| echo: false
viewof mu = Inputs.number({step: 0.5, label: "μ", value: 0})
viewof sd = Inputs.number({step: 0.01, label: "σ", value: 1})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2
#| input:
#|  - mu
#|  - sd
data.frame(x = seq(mu - 3 * sd, mu + 3 * sd, length.out = 1000)) |>
  mutate(p = dnorm(x, mu, sd)) |>
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p),
              data = tibble(x = seq(-3, 3, length.out = 1000)) |> 
                mutate(p = dnorm(x)), fill = "grey") +
  geom_ribbon(aes(ymin = 0, ymax = p)) +
  labs(x = "x", y = "f(x)") 
  
```


:::

::: {.card  title="t distribution -- grey N(0,1)"}

```{ojs}
//| echo: false
viewof df = Inputs.number([0, Infinity], {step: 1, label: "degrees of freedom", value: 1})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2
#| input:
#|  - df
data.frame(x = seq(-5, 5, length.out = 1000)) |>
  mutate(p = dt(x, df)) |>
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p),
              data = tibble(x = seq(-3, 3, length.out = 1000)) |> 
                mutate(p = dnorm(x)), fill = "grey") +
  geom_ribbon(aes(ymin = 0, ymax = p)) +
  labs(x = "x", y = "f(x)") 
  
```


:::


::: {.card  title="Uniform distribution"}

```{ojs}
//| echo: false
viewof xmin = Inputs.number({step: 0.1, label: "min", value: 0})
viewof xmax = Inputs.number({step: 0.1, label: "max", value: 1})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2
#| input:
#|  - xmin
#|  - xmax
data.frame(x = seq(xmin - 0.5, xmax + 0.5, length.out = 1000)) |>
  mutate(p = dunif(x, xmin, xmax)) |>
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p)) +
  labs(x = "x", y = "f(x)") 
  
```


:::

## Row {height=50% .flow}

::: {.card  title="Gamma distribution"}

```{ojs}
//| echo: false
viewof shape = Inputs.number({step: 0.1, label: "shape", value: 1})
viewof rate = Inputs.number({step: 0.1, label: "rate", value: 1})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2
#| input:
#|  - shape
#|  - rate
data <- data.frame(x = seq(0, shape * 10, length.out = 1000)) |>
  mutate(p = dgamma(x, shape, rate)) |> 
  filter(p > 1/100 * median(p))

data |>
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p)) +
  labs(x = "x", y = "f(x)") 
  
```


:::


::: {.card  title="Poisson distribution"}

```{ojs}
//| echo: false
viewof lambda = Inputs.number([0, Infinity], {step: 0.1, label: "λ", value: 1})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2
#| input:
#|  - lambda
xmax <- max(c(10, 2 * lambda))
data <- data.frame(x = 0:xmax) |>
  mutate(p = dpois(x, lambda)) |> 
  filter(p > 1/1000 * max(p))
data|>
  ggplot(aes(x, p)) +
  geom_col() +
  labs(x = "x", y = "P(X = x)") +
  scale_x_continuous(breaks = 0:max(data$x))
```


:::


::: {.card  title="Negative binomial distribution"}

```{ojs}
//| echo: false
viewof nbsize = Inputs.number([1, Infinity], {step: 1, label: "n", value: 10})
viewof nbprob = Inputs.range([0, 1], {step: 0.01, label: "p", value: 0.5})

```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2
#| input:
#|  - nbsize
#|  - nbprob
nmax <- nbsize * 20
data <- data.frame(x = 0:nmax) |>
  mutate(p = dnbinom(x, nbsize, nbprob)) |>
  filter(p > 1/100 * max(p)) 

data |> 
  ggplot(aes(x, p)) +
  geom_col() +
  labs(x = "x", y = "P(X = x)") 
```


:::

::: {.card  title="Chi-square distribution"}

```{ojs}
//| echo: false
viewof chidf = Inputs.number([1, Infinity], {step: 1, label: "degree of freedom", value: 1})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2
#| input:
#|  - chidf
data <- data.frame(x = seq(0, chidf * 10, length.out = 1000)) |>
  mutate(p = dchisq(x, chidf)) |>
  filter(p > 1/100 * median(p)) 

data |> 
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p)) +
  labs(x = "x", y = "f(x)") 
```


:::

::: {.card  title="F distribution"}

```{ojs}
//| echo: false
viewof fdf1 = Inputs.number([1, Infinity], {step: 1, label: "df 1", value: 1})
viewof fdf2 = Inputs.number([1, Infinity], {step: 1, label: "df 2", value: 1})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2
#| input:
#|  - fdf1
#|  - fdf2
data <- data.frame(x = seq(0, fdf1 * 10, length.out = 1000)) |>
  mutate(p = df(x, fdf1, fdf2)) |>
  filter(p > 1/100 * median(p)) 

data |> 
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p)) +
  labs(x = "x", y = "f(x)") 
```


:::


## Row {.fill}


<i class="fas fa-info-circle"></i> Hover over a card and click on the "Expand" icon on the right bottom corner to expand the card to a larger screen.
