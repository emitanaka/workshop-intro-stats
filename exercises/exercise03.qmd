---
title: "Simple linear regression"
description: "[Exercise 3]{.tag-workshop}"
image: /images/ex3-cover.jpeg
format: live-html
webr:
  packages:
    - broom
    - tidyverse
    - faraway
    - skimr
    - ggResidpanel
---


{{< include _head.qmd >}}

```{webr}
#| autorun: true
#| edit: false
#| startover: false
#| runbutton: false
library(tidyverse)
```


```{webr}
#| include: false
#| autorun: true
options(width = 70)
mammal <- faraway::mammalsleep |> 
  select(body, brain) |> 
  rownames_to_column("mammal") |> 
  mutate(mammal = str_replace_all(mammal, "[.]", " "))
```

## What is the relationship between mammal body weight and brain weight?

Consider the `mammal` dataset which contains the body weight in kg and brain weight in grams of 62 mammals. This data, contained in the `faraway` package, is avaiable by typing `mammal` in the exercise consoles.  


```{webr}
#| autorun: true
#| edit: false
glimpse(mammal)
```

Let's check the data first before modelling.


### Exercise 3.1

First let's look at the numerical summary of the data. In particular, check if there are any missing values, unusual values or outliers. 

```{webr}
#| exercise: ex_11
#| caption: "Exercise 3.1"
skimr::skim(mammal)
```


::: {.solution exercise="ex_11"}

**Solution**

There are no missing values. The body and brain weights look very skewed to the right, given that 75% of observations are 48.2 kg or less for body weight and 166.0 grams or less for brain weight and the maximum values are 6654.0 kg and 5712.0 grams, respectively.

```{webr}
#| exercise: ex_11
#| solution: true
skimr::skim(mammal)
```

:::


```{webr}
#| exercise: ex_11
#| check: true
gradethis::grade_this_code()
```

### Exercise 3.2

Next, let's look at the graphical summaries of the data. Create a scatter plot of brain weight against body weight. What does the `geom_text()` do below?

```{webr}
#| exercise: ex_12
#| caption: "Exercise 3.2"
ggplot(mammal) +
  aes(body, brain) +
  ______() + 
  geom_text(aes(label = mammal), nudge_x = -400, nudge_y = -300,
            data = ~filter(., body > 2000 & brain > 2000))
```


::: {.solution exercise="ex_12"}

**Solution**

The `geom_text()` function adds the mammal labels to the points where the body weight is greater than 2000 kg and the brain weight is greater than 2000 grams. This identifies that the two outlying points are the African elephant and the Asian elephant.

```{webr}
#| exercise: ex_12
#| solution: true
ggplot(mammal) +
  aes(body, brain) +
  geom_point() + 
  geom_text(aes(label = mammal), nudge_x = -400, nudge_y = -300,
            data = ~filter(., body > 2000 & brain > 2000))
```

:::


```{webr}
#| exercise: ex_12
#| check: true
gradethis::grade_this_code()
```

### Exercise 3.3

Looks like there are a few points that have much larger body and brain weight. Let's consider taking a log transformation for both $x$ and $y$ axis. How does the relationship between body and brain weight look like after the log transformation?

```{webr}
#| exercise: ex_13
#| caption: "Exercise 3.3"
ggplot(mammal) +
  aes(body, brain) +
  ______() +
  ______log10() + 
  ______log10()
```


::: {.solution exercise="ex_13"}

**Solution**

The relationship between body and brain weight looks more linear after the log transformation.

```{webr}
#| exercise: ex_13
#| solution: true
ggplot(mammal) +
  aes(body, brain) +
  geom_point() +
  scale_y_log10() +
  scale_x_log10()
```

:::


```{webr}
#| exercise: ex_13
#| check: true
gradethis::grade_this_code()
```

### Exercise 3.4

What is the correlation between the log of body and the log of brain weight? Calculate using the log with base 10. 

```{webr}
#| exercise: ex_14
#| caption: "Exercise 3.4"
______(log10(mammal$body), log10(mammal$brain))
```


::: {.solution exercise="ex_14"}

**Solution**

The correlation is pretty high!


```{webr}
#| exercise: ex_14
#| solution: true
cor(log10(mammal$body), log10(mammal$brain))
```

```{webr}
#| echo: false 
#| autorun: true
cor(log10(mammal$body), log10(mammal$brain))
```


:::


```{webr}
#| exercise: ex_14
#| check: true
gradethis::grade_this_code()
```

### Exercise 3.5

Let's fit a simple linear regression model to predict brain weight from body weight and look at the summary of the model.

```{webr}
#| exercise: ex_15
#| caption: "Exercise 3.5"
fit <- lm(______, data = mammal)
summary(fit)
```

::: { .hint exercise="ex_15"}
::: { .callout-note collapse="false"}
## Hint

Did you take the log transformation of the variables?

```r
lm(log10(brain) ~ ______, data = mammal)
```
:::
:::

::: {.solution exercise="ex_15"}

**Solution**


```{webr}
#| exercise: ex_15
#| solution: true
fit <- lm(log10(brain) ~ log10(body), data = mammal)
summary(fit)
```

```{webr}
#| echo: false 
#| autorun: true
fit <- lm(log10(brain) ~ log10(body), data = mammal)
betas <- coef(fit)
summary(fit)
```

```{r}
#| include: false
library(tidyverse)
mammal <- faraway::mammalsleep |> 
  select(body, brain) |> 
  rownames_to_column("mammal") |> 
  mutate(mammal = str_replace_all(mammal, "[.]", " "))
fit <- lm(log10(brain) ~ log10(body), data = mammal)
betas <- coef(fit)
```



Based on the above the fitted model is:

$$\log_{10}(\hat{\texttt{brain}}) = `r round(betas[1], 3)` + `r round(betas[2], 3)` \times \log_{10}(\texttt{body})$$
or transforming back to the original scale:

$$\hat{\texttt{brain}} = 10^{`r round(betas[1], 3)` + `r round(betas[2], 3)` \times \log_{10}(\texttt{body})}$$

:::


```{webr}
#| exercise: ex_15
#| check: true
gradethis::grade_this_code()
```


### Exercise 3.6


Let's have a look at some model diagnostics to see if there are any issues with the model. Create some plots to assess the assumption that the errors are independently and identically normally distributed. Do you have any concerns about the model fit? 

```{webr}
#| exercise: ex_16
#| caption: "Exercise 3.6"
ggResidpanel::resid_panel(fit)
```


::: {.solution exercise="ex_16"}

**Solution**

The residuals look approximately normally distributed (as indicated by the bell curve shape in the histogram and Q-Q plot). There are no noticeable trends or unusual patterns that can be seen in the residual plots. 

```{webr}
#| autorun: true
#| edit: false
ggResidpanel::resid_panel(fit)
```

Okay, given that we observe no violations of the model assumptions from above, let's proceed with some inferences from this model. 

:::



### Exercise 3.7


What is the 95% confidence interval for the slope of the model? You don't need to transform the variables back to the original scale in thie exercise. 

```{webr}
#| exercise: ex_17
#| caption: "Exercise 3.7"
______(fit, "log10(body)")
```

::: { .hint exercise="ex_17"}
::: { .callout-note collapse="false"}
## Hint

Check out what the function `confint` does in R.

```r
help(confint)
```

:::
:::

::: {.solution exercise="ex_17"}

**Solution**

The 95% confidence interval for the slope is given as:


```{webr}
#| exercise: ex_17
#| solution: true
confint(fit, "log10(body)")
```

Or alternatively, this can be extracted using the `tidy` function from the `broom` package:

```{webr}
#| autorun: true
tidy(fit, conf.int = TRUE) |> 
  filter(term == "log10(body)")
```

:::


```{webr}
#| exercise: ex_17
#| check: true
gradethis::grade_this_code()
```


### Exercise 3.8

Given the model from the previous exercise, predict the mean brain weight when the body weight is 100kg and its 99% confidence interval. 

```{webr}
#| exercise: ex_18
#| caption: "Exercise 3.8"
______^predict(fit, ______, 
               interval = "confidence", level = 0.99)
```

::: { .hint exercise="ex_18"}
::: { .callout-note collapse="false"}
## Hint

Note that here we have to transform the predicted value to the original scale by taking the inverse function (the inverse of the $\log_{10}(x)$ functions is $10^x$). In R, the $10^x$ function is given by `10^x` where `x` is a numeric value. 

```r
10^predict(fit, ______, interval = "confidence", level = 0.99)
```
:::
:::

::: {.solution exercise="ex_18"}

**Solution**

The predicted brain weight (in g) when the body weight is 100kg is:


```{webr}
#| exercise: ex_18
#| solution: true
10^predict(fit, newdata = data.frame(body = 100), 
           interval = "confidence", level = 0.99)
```

```{webr}
#| echo: false 
#| autorun: true
10^predict(fit, newdata = data.frame(body = 100), 
           interval = "confidence", level = 0.99)
```

:::


```{webr}
#| exercise: ex_18
#| check: true
gradethis::grade_this_code()
```


<br><br>

---

ðŸŽ‰ _`r praise::praise("${Exclamation}! ")`_ You've reached the end of this exercise! _`r praise::praise("You are ${adjective}!")`_ Proceed to ...<br><br>


[<i class="fas fa-caret-square-right"></i> next slide](/slides/slide4.html){.button-next} <br><br>

[<i class="fas fa-caret-square-right"></i>  next exercise](/exercises/exercise04.html){.button-next}