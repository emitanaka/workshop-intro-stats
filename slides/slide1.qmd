---
title: Parametric distributions to describe and simulate data
description: "[Slide 1]{.tag-workshop}"
format:
  anu-light-revealjs
image: /images/slide1-cover.jpeg
date: 2025/02/18
webr:
  packages:
    - ggplot2
    - dplyr
    - agridat
---


```{r}
#| include: false
library(tidyverse)
library(ggtext)
library(patchwork)
source("setup.R")
knitr::opts_chunk$set(dev.args = list(bg = "transparent"),
                      fig.align = "center")
theme_set(theme_classic(base_size = 24) + 
            theme(plot.title.position = "plot",
                  plot.background = element_rect(fill = "transparent", color = "transparent"),
                  legend.background = element_rect(fill = "transparent"),
                  panel.background = element_rect(fill = "transparent"),
                  plot.caption = element_markdown(lineheight = 1.2)))

options(ggplot2.discrete.fill = list(c("forestgreen", "red2")),
        ggplot2.discrete.colour = list(c("forestgreen", "red2")))
```

<div style="display:none;">{{< fa thumbs-up >}}</div>

# [Univariate data]{.page-break} {background-color="#F5EDDE"}

## [Distribution of data]{.page-concept}

- The distribution of data can tells about the frequency of a range of values. 


::: {.columns}
::: {.column width="50%"}

For **discrete data**, we can use a [**barplot**]{.blue} to visualise the distribution.

```{r}
#| echo: false
#| fig-width: 4
#| fig-height: 4
data.frame(x = rbinom(1000, 10, 0.8)) |> 
  ggplot(aes(x)) +
  geom_bar(fill = "#0063B2FF") +
  theme_void()
```



:::

::: {.column width="50%"}


For **continuous data**, we can use a [**histogram**]{.blue} or [**density plot**]{style="color:#D22B2B"} to visualise the distribution.

```{webr}
#| input: 
#|  - nbins 
#| echo: false
#| fig-width: 4
#| fig-height: 4
set.seed(1)
data.frame(x = rnorm(10000, 10, 4)) |> 
  ggplot(aes(x)) +
  geom_histogram(aes(y = after_stat(density)), fill = "#0063B2FF", bins = nbins, color = "white") +
  geom_density(color = "#D22B2B", linewidth = 1.5) + 
  theme_void()
```

::: f3

```{ojs}
//| echo: false
viewof nbins = Inputs.number([5, 100], {step: 1, label: "Number of bins for histogram", value: 30})
```

::: 

::: {.box}

<i class="fas fa-exclamation-triangle"></i> The number of bins does affect the histogram appearance, so explore different values to see how it changes the plot.

:::

:::
:::



## [Parametric distributions]{.page-concept}

- Parametric distribution are defined by just _a handful of parameters_.

```{webr}
#| include: false
library(ggplot2)
library(dplyr)
theme_set(theme_minimal() + 
            theme(plot.background = element_rect(fill = "transparent", color = NA),
                  panel.background = element_rect(fill = "transparent", color = NA)))
knitr::opts_chunk$set(dev.args = list(bg = "transparent"), fig.align = "center")
```

```{css, echo = FALSE}
.card-slide {
  width: 24%;
  height: 38%;
  font-size: 0.5em;
  padding: 10px;
  border: 1px solid black;
  border-radius: 5px;
  float: left;
  margin: 5px;
}

.card-slide .observablehq > form > label {
  width: auto!important;
}
```

::: {.card-slide}

**Bernoulli distribution**

```{ojs}
//| echo: false
viewof p2 = Inputs.range([0, 1], {step: 0.01, label: "p", value: 0.5})
```

<br>

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2.8
#| input:
#|  - p2
data.frame(x = 0:1, p = dbinom(0:1, 1, p2)) |> 
  ggplot(aes(x, p)) +
  geom_col(fill = "#0063B2FF") +
  labs(x = "x", y = "P(X = x)") +
  scale_x_continuous(breaks = 0:1)
```


:::


::: {.card-slide}

**Binomial distribution**

```{ojs}
//| echo: false
viewof n = Inputs.number([1, Infinity], {step: 1, label: "n", value: 10})
viewof p = Inputs.range([0, 1], {step: 0.01, label: "p", value: 0.5})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2.8
#| input:
#|  - n
#|  - p
data.frame(x = 0:n, p = dbinom(0:n, n, p)) |> 
  ggplot(aes(x, p)) +
  geom_col(fill = "#0063B2FF") +
  labs(x = "x", y = "P(X = x)") +
  scale_x_continuous(breaks = 0:n)
```


:::

::: {.card-slide  title="Poisson distribution"}

**Poisson distribution**

```{ojs}
//| echo: false
viewof lambda = Inputs.number([0, Infinity], {step: 0.1, label: "Œª", value: 1})
```

<br>

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2.8
#| input:
#|  - lambda
xmax <- max(c(10, 2 * lambda))
data <- data.frame(x = 0:xmax) |>
  mutate(p = dpois(x, lambda)) |> 
  filter(p > 1/1000 * max(p))
data|>
  ggplot(aes(x, p)) +
  geom_col(fill = "#0063B2FF") +
  labs(x = "x", y = "P(X = x)") +
  scale_x_continuous(breaks = 0:max(data$x))
```


:::


::: {.card-slide  title="Negative binomial distribution"}

**Negative binomial distribution**

```{ojs}
//| echo: false
viewof nbsize = Inputs.number([1, Infinity], {step: 1, label: "n", value: 10})
viewof nbprob = Inputs.range([0, 1], {step: 0.01, label: "p", value: 0.5})

```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2.8
#| input:
#|  - nbsize
#|  - nbprob
nmax <- nbsize * 20
data <- data.frame(x = 0:nmax) |>
  mutate(p = dnbinom(x, nbsize, nbprob)) |>
  filter(p > 1/100 * max(p)) 

data |> 
  ggplot(aes(x, p)) +
  geom_col(fill = "#0063B2FF") +
  labs(x = "x", y = "P(X = x)") 
```


:::


::: {.card-slide}

**Normal distribution**

```{ojs}
//| echo: false
viewof mu2 = Inputs.number({step: 0.5, label: "Œº", value: 0})
viewof sd2 = Inputs.number({step: 0.01, label: "œÉ", value: 1})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2.8
#| input:
#|  - mu2
#|  - sd2
data.frame(x = seq(mu2 - 3 * sd2, mu2 + 3 * sd2, length.out = 1000)) |>
  mutate(p = dnorm(x, mu2, sd2)) |>
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p),
              data = tibble(x = seq(-3, 3, length.out = 1000)) |> 
                mutate(p = dnorm(x)), fill = "grey") +
  geom_ribbon(aes(ymin = 0, ymax = p), fill = "#0063B2FF") +
  labs(x = "x", y = "f(x)") 
  
```


:::

::: {.card-slide  title="t distribution -- grey N(0,1)"}

**t distribution**

```{ojs}
//| echo: false
viewof df2 = Inputs.number([0, Infinity], {step: 1, label: "degrees of freedom", value: 1})
```

<br>

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2.8
#| input:
#|  - df2
data.frame(x = seq(-5, 5, length.out = 1000)) |>
  mutate(p = dt(x, df2)) |>
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p),
              data = tibble(x = seq(-3, 3, length.out = 1000)) |> 
                mutate(p = dnorm(x)), fill = "grey") +
  geom_ribbon(aes(ymin = 0, ymax = p), fill = "#0063B2FF") +
  labs(x = "x", y = "f(x)") 
  
```


:::


::: {.card-slide  title="Uniform distribution"}

**Uniform distribution**

```{ojs}
//| echo: false
viewof xmin = Inputs.number({step: 0.1, label: "min", value: 0})
viewof xmax = Inputs.number({step: 0.1, label: "max", value: 1})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2.8
#| input:
#|  - xmin
#|  - xmax
data.frame(x = seq(xmin - 0.5, xmax + 0.5, length.out = 1000)) |>
  mutate(p = dunif(x, xmin, xmax)) |>
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p), fill = "#0063B2FF") +
  labs(x = "x", y = "f(x)") 
  
```


:::


::: {.card-slide  title="Gamma distribution"}

**Gamma distribution**

```{ojs}
//| echo: false
viewof shape = Inputs.number({step: 0.1, label: "shape", value: 1})
viewof rate = Inputs.number({step: 0.1, label: "rate", value: 1})
```

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 4
#| fig-height: 2.8
#| input:
#|  - shape
#|  - rate
data <- data.frame(x = seq(0, shape * 10, length.out = 1000)) |>
  mutate(p = dgamma(x, shape, rate)) |> 
  filter(p > 1/100 * median(p))

data |>
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p), fill = "#0063B2FF") +
  labs(x = "x", y = "f(x)") 
  
```


:::






# [Discrete variable]{.page-break} {background-color="#F5EDDE"}

## [Binary events in the wild]{.page-data}

```{r coin}
#| echo: false
set.seed(1)
head <- '<img src="/images/Australian_Fifty_Cents_Obv.png" style="vertical-align:middle;height:1.5em;">'
tail <- '<img src="/images/Australian_50c_Coin.png"  style="vertical-align:middle;height:1.5em;">'
```


::: {.columns}
::: {.column width="50%"}

::: {.box}

**Flipping a coin** ü™ô

- Possible outcomes:  (A) tail `r tail` or (B) head `r head`
- For an unbiased coin, probability for each outcome is 0.5.

:::


::: {.box}

**Singleton pregnancy in women** ü§∞

- Possible outcomes: (A) a baby girl üëß or (B) a baby boy üë¶ [ignoring miscarriages, irregularities, intersex, etc]{.f2}
- Probability for each outcome is 0.5.

:::




:::

::: {.column width="50%"}

::: {.box}

**Australian Federal election** üá¶üá∫

- Possible outcomes: (A) Labor party üî¥ or (B) Liberal party üîµ [(ignoring other parties and formation of majority or minority government)]{.f2}
- Probability for Labor party winning??

:::

::: {.box}

**Winning a chess match** ‚ôüÔ∏è

- Possible outcomes: (A) Win üèÜ or (B) Lose ‚ùå 
- Probability of winning depends on the skill level of the players

:::



:::
:::


## [Bernoulli distribution]{.page-rproj}

::: box

- **A random event with two possible outcomes**: A or B.
- The probability of A is $p$ and the probability of B is $1-p$.

:::

. . . 

- A **_Bernoulli trial_** for say $p = 0.5$ in {{< fa brands r-project >}} is shown below:

```{webr}
#| include: false
#| autorun: true
library(tidyverse)
options(width = 75)
theme_set(theme_classic(base_size = 24) + 
            theme(plot.title.position = "plot",
                  plot.background = element_rect(fill = "transparent", color = "transparent"),
                  legend.background = element_rect(fill = "transparent"),
                  panel.background = element_rect(fill = "transparent")))
options(ggplot2.discrete.fill = list(c("forestgreen", "red2")),
        ggplot2.discrete.colour = list(c("forestgreen", "red2")))
```


```{webr}
p <- 0.5
sample(c("A", "B"), size = 1, prob = c(p, 1 - p))
```
. . . 


- Or we encode A = 1 and B = 0:

```{webr}
rbinom(n = 1, size = 1, prob = p)
```





## [Binomial distribution]{.page-rproj}

- Suppose we have $n = 30$ **_independent_** Bernoulli trials with $p = 0.2$.

```{webr}
(x <- rbinom(n = 30, size = 1, prob = 0.2))
```

. . . 

::: box

- The number of "successes" out of $n$ independent Bernoulli trials with probability of success, $p$, follows a **_binomial distribution_** with parameters $n$ and $p$.

:::

```{webr}
sum(x)
```

. . . 

- Or we can simulate the sum directly:

```{webr}
rbinom(n = 1, size = 30, prob = 0.2)
```


## [A Binomial random variable]{.page-concept}

$$X = X_1 + X_2 + \cdots + X_n \sim B(n, p)$$

- $X_i \sim \text{Bernoulli}(p)$ where $p$ is the probability of success,
- $X_i = 1$ if $i$-th trial is a success, otherwise $X_i = 0$,
- all the trials are independent and $p$ is constant for all trials,
- $X \in \{0, 1, \ldots, n\}$ is the number of successes out of $n$ trials.

::: {.columns}
::: {.column width="50%"}

::: box

- Expected value: $E(X) = np$
- Variance: $\text{Var}(X) = np(1-p)$ 
- Standard deviation: $\text{SD}(X) = \sqrt{np(1-p)}$


:::

:::

::: {.column width="50%"}

::: box

Probability mass function:

$$P(X = x) = \binom{n}{x} p^x (1-p)^{n-x}$$
:::

:::
:::


## [Binomial probability and distribution function]{.page-rproj}

::: box

Suppose I flip an unbiased coin 10 times (so $n = 10, p = 0.5$). 

:::

- What is the probability that exactly 3 are heads?

```{webr}
dbinom(3, size = 10, prob = 0.5)
```

. . . 

- What is the probability that there are 3 or less heads?

```{webr}
pbinom(3, size = 10, prob = 0.5)
```

. . . 

- What is the probability that there are 3 or more heads?

```{webr}
1 - pbinom(2, size = 10, prob = 0.5)
```




## [Simulating Binomial random variables]{.page-code}


```{webr}
#| autorun: true
#| define:
#|   - x
#|   - n
#|   - p 
n <- 10
p <- 0.5
(x <- rbinom(20, size = n, prob = p))
```

```{webr}
#| echo: false
head <- '<img src="/images/Australian_Fifty_Cents_Obv.jpg" style="vertical-align:middle;height:1.5em;">'
tail <- '<img src="/images/Australian_50c_Coin.png"  style="vertical-align:middle;height:1.5em;">'
flip <- function(x, n, i) {
  paste0(c("Experiment ", i, ": ", sample(c(rep(head, x), rep(tail, n - x)))), collapse = "")
}
```

<br>

**Simulating coin flips and count the number of heads**

```{webr}
#| echo: false
#| input: 
#|   - x
#|   - n 
#| output: asis
paste0(c(sapply(1:5, function(i) flip(x[i], n, i)), " ..."), collapse = "<br>")
```



## [Use _in-silico experiments_ to understand statistics]{.page-code}

- Computer-based simulations are "cheap".
- Understand how statistics behave under known data-generating process.

::: {.columns}
::: {.column width="60%"}

```{ojs}
//| echo: false
viewof n_exp = Inputs.number([5, Infinity], {step: 1, label: "n_exp", value: 5})
viewof n_trials = Inputs.number([1, Infinity], {step: 1, label: "n_trials", value: 10})
viewof prob = Inputs.range([0, 1], {step: 0.05, label: "prob", value: 0.5})
```

```{webr}
#| autorun: true
#| define: 
#|   - sim
#| input:
#|   - n_trials
#|   - n_exp
#|   - prob
sim <- rbinom(n_exp, n_trials, prob)
c(mean(sim), var(sim))
```



:::

::: {.column width="40%"}


```{webr}
#| echo: false
#| fig-height: 3.7
#| warning: false
#| input:
#|   - n_trials
#|   - prob
tibble(x = 0:n_trials) |> 
  mutate(y = dbinom(x, size = n_trials, prob = prob)) |> 
  ggplot(aes(x, y)) +
  geom_col() +
  scale_x_continuous(breaks = 0:n_trials,
                     limits = c(0, n_trials)) +
  labs(x = "x", y = "P(X = x)",
       title = paste0("Theoretical: E(X) = ", n_trials * prob, ", Var(X) = ", round(n_trials * prob * (1 - prob), 2)))
```


```{webr}
#| echo: false
#| warning: false
#| fig-height: 3.7
#| input:
#|   - sim
data.frame(x = sim) |> 
  count(x) |>
  mutate(p = n / sum(n)) |> 
  ggplot(aes(x, p)) +
  geom_col() +
  scale_x_continuous(breaks = 0:n_trials,
                     limits = c(0, n_trials)) +
  labs(title = "Empirical simulation", y = "Proportion")
```

:::
:::




# [Continuous variable]{.page-break} {background-color="#F5EDDE"}


## [Continuous data in the wild]{.page-data}

::: {.columns}
::: {.column width="50%"}

::: {.box}

**Heights of adults**

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3
height <- readRDS(here::here("data/height.rds"))
ggplot(height, aes(standing_height_cm)) +
  geom_histogram(color = "white") +
  labs(x = "Standing height (cm)", y = "Count",
       subtitle = paste0(scales::comma(nrow(height)), " adults"),
       caption = "_**Source**: US National Health and Nutrition Survey (2017-2018)_") +
  theme(plot.title.position = "panel")
```



:::


::: {.box}

**Yields of a sorghum variety at a location in India**

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3
ggplot(agridat::kulkarni.sorghum.uniformity, aes(yield)) +
  geom_histogram(color = "white") +
  labs(caption = str_wrap("_**Source**: Kulkarni et al. (1936) Indian J. Agric. Sci._", 60), x = "Grain yield (tolas per plot)", y = "Count",
       subtitle = paste0(nrow(agridat::kulkarni.sorghum.uniformity), " plots")) +
  theme(plot.title.position = "panel")
```



:::




:::

::: {.column width="50%"}

::: {.box}

**Wheat flour retail prices in India, 2022 April**

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3
wheat <- readRDS(here::here("data/wheat-retail-prices.rds")) 
ggplot(wheat, aes(price)) +
  geom_histogram(color = "white") +
  labs(x = "1kg wheat flour market price (Indian rupee)",
       caption = "_**Source**: India - Food Prices from UN World Food Programme_", y = "Count",
       subtitle = paste0(nrow(wheat), " markets")) +
  theme(plot.title.position = "panel")
```



:::

::: {.box}

**Total download of R packages on February 2024**

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3
cranlogs <- readRDS(here::here("data/cranlogs.rds")) |> 
  summarise(count = sum(count), .by = package)
ggplot(cranlogs, aes(count)) +
  geom_histogram(color = "white") +
  labs(x = "Total downloads in February 2024", y = "Count",
       caption = "_**Source**: RStudio CRAN mirror_",
       subtitle = paste0(scales::comma(nrow(cranlogs)), " packages")) +
  theme(plot.title.position = "panel") +
  scale_x_log10()
```


:::



:::
:::




## [Normal distribution]{.page-concept}

::: box

- A continuous distribution that is **symmetric** and **bell-shaped**.
- The probability density function is:

$$f(x; \mu, \sigma) = \frac{1}{\sigma\sqrt{2\pi}}\text{exp}\left(-\frac{(x - \mu)^2}{2\sigma^2}\right)$$

:::

::: {.columns}
::: {.column width="40%"}



- $X \sim N(\mu, \sigma^2)$ where 
  - [$E(X) = \mu$ is the mean/expected value]{.blue} and
  - [$\text{Var}(X) = \sigma^2$ is the variance]{.blue}.
- The _standard normal distribution_ is $N(0, 1)$.

:::



::: {.column width="60%"}

::: f3

```{ojs}
//| echo: false
viewof mu = Inputs.number({step: 0.5, label: "Œº", value: 0})
viewof sd = Inputs.number({step: 0.5, label: "œÉ", value: 1})
```

:::


```{webr}
#| echo: false
#| autorun: true
#| fig-width: 6
#| fig-height: 3.5
#| input:
#|  - mu
#|  - sd
data.frame(x = seq(mu - 3 * sd, mu + 3 * sd, length.out = 1000)) |>
  mutate(p = dnorm(x, mu, sd)) |>
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p),
              data = tibble(x = seq(-3, 3, length.out = 1000)) |> 
                mutate(p = dnorm(x)), fill = "grey") +
  geom_ribbon(aes(ymin = 0, ymax = p), fill = "#0063B2FF") +
  labs(x = "x", y = "f(x)") 
  
```

<center>

[Total area under the curve = 1]{.blue}.

</center>

:::
:::


## [Probability calculation for continuous distributions]{.page-rproj}

- The probability of a continuous random variable falling in a specific range is the area under the curve.

::: {.columns .f2}
::: {.column width="33%"}

```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 4
tibble(x = seq(-5, 5, length.out = 1000)) |> 
  mutate(p = dnorm(x)) |> 
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p),
              data = ~filter(., x < 2), fill = "#0063B2FF") +
  geom_line()
```

$P(X < 2)$ where $X \sim N(0, 1)$

```{webr}
pnorm(2)
```


:::

::: {.column width="33%"}

```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 4
tibble(x = seq(-5, 8, length.out = 1000)) |> 
  mutate(p = dnorm(x, 1, 2)) |> 
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p),
              data = ~filter(., x > 2), fill = "#0063B2FF") +
  geom_line()
```

$P(X > 2)$ where $X \sim N(1, 2)$

```{webr}
1 - pnorm(2, 1, 2)
```

:::

::: {.column width="33%"}

```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 4
tibble(x = seq(-5, 5, length.out = 1000)) |> 
  mutate(p = dnorm(x)) |> 
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p),
              data = ~filter(., x < 2 & x > 0), fill = "#0063B2FF") +
  geom_line()
```

$P(0 < X < 2)$ where $X \sim N(0, 1)$

```{webr}
pnorm(2) - pnorm(0)
```
:::
:::


## [Fitting a normal distribution to data]{.page-rproj}

- <i class="fas fa-database"></i> Yields of a sorghum variety at a location in India

::: f2

```{webr}
#| define:
#|  - yield_mean
#|  - yield_sd
#| autorun: true
data(kulkarni.sorghum.uniformity, package = "agridat")
(yield_mean <- mean(kulkarni.sorghum.uniformity$yield))
(yield_sd <- sd(kulkarni.sorghum.uniformity$yield))
```

:::

- Visualise a normal distribution fitted to the data:

::: f2

```{webr}
#| input:
#| - yield_mean
#| - yield_sd
ggplot(kulkarni.sorghum.uniformity, aes(yield)) +
  geom_histogram(aes(y = after_stat(density)),
                 color = "white", bins = 30) +
  geom_function(fun = \(x) dnorm(x, yield_mean, yield_sd),
                color = "red2", linewidth = 1.2)
```

:::

- Calculate the probability of a yield being greater than 1.5 tolas per plot:

```{webr}
#| input:
#| - yield_mean
#| - yield_sd
1 - pnorm(1.5, yield_mean, yield_sd)
```



## [Student's t distribution]{.page-concept}

![](/images/xkcd/t_distribution.png)
[Source: [xkcd](https://xkcd.com/)]{.f2}

- The t-distribution is a continuous distribution that is symmetric and bell-shaped, but has _heavier tails than the standard normal distribution_.
- The t-distribution is  **_used when the sample size is small_** and the _population standard deviation is estimated from the sample_.
- The grey area is $N(0, 1)$ for comparison.

::: {.columns}
::: {.column width="40%"}

::: f3

```{ojs}
//| echo: false
viewof df = Inputs.number([0, Infinity], {step: 1, label: "degrees of freedom", value: 1})
```

:::

- As the degrees of freedom increases, the t-distribution approaches the standard normal distribution.

:::

::: {.column width="60%"}

```{webr}
#| echo: false
#| autorun: true
#| fig-width: 10
#| fig-height: 6
#| input:
#|  - df
data.frame(x = seq(-5, 5, length.out = 1000)) |>
  mutate(p = dt(x, df)) |>
  ggplot(aes(x, p)) +
  geom_ribbon(aes(ymin = 0, ymax = p),
              data = tibble(x = seq(-3, 3, length.out = 1000)) |> 
                mutate(p = dnorm(x)), fill = "grey") +
  geom_ribbon(aes(ymin = 0, ymax = p)) +
  labs(x = "x", y = "f(x)") 
  
```


:::
:::





# [Central limit theorem]{.page-break}


## [Why normal distribution?]{.page-concept}

- A number of distribution in nature appears to conform a normal distribution (if you ignore the fact that some values can never be negative).

::: {.box .f-subheadline}

**Central limit theorem**: If a random variable is the mean (or sum) of independent random values, then that value will follow a normal distribution regardless of how the individual terms are distributed.

:::

## [Central limit theorem]{.page-game} {background-color="#F5EDDE"}


<https://emitanaka.org/workshop-intro-stats/games/games02.html>


# [Summary]{.page-break}


- **Parametric distributions** can approximately describe the distribution of data with just a handful of parameters. 
- The number of successes in $n$ independent **Bernoulli trials** with success probability $p$ has a **Binomial distribution**.
- The **Normal distribution** is symmetric and bell-shaped.
- The **t-distribution** is similar to the Normal distribution but has heavier tails and useful where the sample size is small and population standard deviation is unknown.
- The **Central Limit Theorem** means that the sum or mean of independent random variables will follow a normal distribution regardless of the distribution of the individual terms.
- These distributions can be used to **simulate data** to conduct in-silico experiments.


# [Summary of Parametric distributions]{.page-break}


| Name | Distribution | Description | Functions | 
|---------|----------|---------------------------|-------------|
| Bernoulli | $B(1, p)$ | Binary outcomes | `rbinom`, `dbinom`, `pbinom`, `qbinom` |
| Binomial | $B(n, p)$  | Number of successes in a fixed number of Bernoulli trials  | `rbinom`, `dbinom`, `pbinom`, `qbinom` |
| Normal | $N(\mu, \sigma^2)$ | Continuous distribution that is symmetric and bell-shaped | `rnorm`, `dnorm`, `pnorm`, `qnorm` |
| $t$-distribution | $t_d$ | Continuous distribution that is symmetric and bell-shaped, but has heavier tails than the normal distribution | `rt`, `dt`, `pt`, `qt` |

`r` - random number generation, `d` - density function, `p` - cumulative distribution function, `q` - quantile function


# [Exercise time]{.page-exercise} {background-color="#F5EDDE"}

[<i class="fas fa-terminal"></i> Go to Exercise 1](/exercises/exercise01.html){.button-next} <br><br>

[<i class="fas fa-caret-square-right"></i> Next slide](/slides/slide2.html){.button-next} <br><br>

[<i class="fas fa-fast-backward"></i> Back to start](/slides/slide1.html){.button-next}

